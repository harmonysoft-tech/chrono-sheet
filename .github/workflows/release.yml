name: build and release

on:
  push:
    branches: [ "main" ]

jobs:
  build-android:
    name: build android
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: checkout source
        uses: actions/checkout@v4

      - name: prepare environment for android build
        uses: ./.github/actions/prepare-environment
        with:
          firebase-options-base64: ${{ secrets.FIREBASE_OPTIONS_DART }}

      - name: prepare sensitive android data
        run: |
          echo "${{ secrets.GOOGLE_SERVICE_JSON }}" | base64 -d >> ./android/app/google-services.json
          echo "${{ secrets.RELEASE_KEYSTORE }}" | base64 -d >> ./android/app/chrono-sheet.jks
          echo "storeFile=chrono-sheet.jks" >> ./android/key.properties
          echo "storePassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> ./android/key.properties
          echo "keyPassword=${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" >> ./android/key.properties
          echo "keyAlias=${{ secrets.RELEASE_KEYSTORE_KEY }}" >> ./android/key.properties

      - name: test
        run: |
          echo "${{ secrets.GOOGLE_TEST_SERVICE_ACCOUNT1_JSON }}" | base64 -d >> ./test_common/resources/auto-test-service-account1.json
          echo "${{ secrets.GOOGLE_TEST_SERVICE_ACCOUNT2_JSON }}" | base64 -d >> ./test_common/resources/auto-test-service-account2.json
          flutter test test

      - name: enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: integration test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          script: run-integration-tests.sh

      - name: prepare splash
        shell: bash
        run: dart run flutter_native_splash:create

      - name: prepare gradle cache key
        # we explicitly use the same cache key for restoring and saving the cache because
        # it seems that the flutter build modifies gradle files and if we generate the key
        # from hash after the build (on cache save), we get a hash value whcih is different
        # from the value we get initially (on cache restore)
        run: echo "GRADLE_CACHE_KEY=gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}" >> $GITHUB_ENV

      - name: restore gradle cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ env.GRADLE_CACHE_KEY }}

      - name: release paperwork
        run: |
          ./gradlew release-paperwork
          git push

      - name: build apk
        run: flutter build apk --release

      - name: build app bundle
        run: flutter build appbundle

      - name: save gradle cache
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ env.GRADLE_CACHE_KEY }}

      - name: upload apk
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: upload aab
        uses: actions/upload-artifact@v4
        with:
          name: aab
          path: build/app/outputs/bundle/release/app-release.aab

      - name: upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-build
          path: |
            build/
            .dart_tool/
            .pub-cache/

  build-iphone:
    name: build iphone
    runs-on: macos-latest
    needs: build-android
    steps:
      - name: checkout source
        uses: actions/checkout@v4

      - name: prepare environment for iphone build
        uses: ./.github/actions/prepare-environment
        with:
          firebase-options-base64: ${{ secrets.FIREBASE_OPTIONS_DART }}

      - name: prepare sensitive iphone data
        run: |
          # ios
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo "${{ secrets.INFO_PLIST }}" | base64 -d >> ./ios/Runner/Info.plist
          echo "${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}" | base64 -d >> ./ios/Runner/GoogleService-Info.plist
          echo "${{ secrets.IPHONE_CERTIFICATE_P12 }}" | base64 -d >> $CERTIFICATE_PATH
          echo "${{ secrets.IPHONE_PROVISIONING_PROFILE }}" | base64 -d >> $PP_PATH
          mkdir ./private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d >> ./private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          
          # create temporary keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "${{ secrets.IPHONE_CERTIFICATE_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: flutter-build
          path: .

      - name: prepare splash
        shell: bash
        run: dart run flutter_native_splash:create

      - name: build ipa
        run: flutter build ipa --release --export-options-plist ios/GithubActionsExportOptions.plist

      - name: upload to testflight
        run: |
          xcrun altool --validate-app -f ./build/ios/ipa/chrono_sheet.ipa -t ios --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} --apiIssuer ${{ secrets.APP_STORE_CONNECT_DEVELOPER_ID }}
          xcrun altool --upload-app -f ./build/ios/ipa/chrono_sheet.ipa -t ios --apiKey ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} --apiIssuer ${{ secrets.APP_STORE_CONNECT_DEVELOPER_ID }}

      - name: clean sensitive data
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision